#+TITLE: Haskell
#+AUTHOR: Vonfry

[[https://github.com/haskell/haskell-report][report]] - Haskell Language Report

* Coding Style
  - [[https://wiki.haskell.org/Category:Style][wiki: style]] ::
  - [[https://wiki.haskell.org/Category:Idioms][wiki: idiomls]] ::
  - [[https://github.com/tibbe/haskell-style-guide][tibble]] ::
      - hindent ::
  - [[https://github.com/facebookincubator/retrie][retrie]] ::

* Compiler
  - [[https://www.haskell.org/ghc/][ghc]] ::
    - [[https://github.com/ndmitchell/ghcid][ghcid]] :: Very low feature GHCi based IDE
  - [[https://github.com/ghcjs/ghcjs][ghcjs]] :: write web script by haskell
** Parser
   - alex ::
     - [[https://devanla.com/posts/wya-lexer.html][tutor]], [[https://web.archive.org/web/20210409010429/https://devanla.com/posts/wya-lexer.html][archive]] :: example to python
   - happy ::
* Package & project
  - [[http://hackage.haskell.org/][hackage]] ::
  - cabal ::
  - [[http://www.haskellstack.org/][stack]] :: Work with cabal to manage whole project.
      - [[https://www.stackage.org/][stackage]] :: "Stable Hackage": vetted consistent packages from Hackage
      - stack-run :: A plugin, quickly run the project.
  - [[https://github.com/nmattia/snack][snack]] :: Nix-based incremental Haskell build tool
  - shake ::

* Tool Chains
  - haddock :: comment to document
      - [[https://hackage.haskell.org/package/haddock][cheatsheet]] ::
  - [[https://hackage.haskell.org/package/CheatSheet][cheatsheet]] ::
  - [[https://www.haskell.org/hoogle/][hoogle]] :: quickly searching
  - [[https://github.com/dhall-lang/dhall-haskell][dhall]] :: a config language
  - [[https://github.com/yav/graphmod][graphmod]] :: A utility for displaying the module dependencies of Haskell programs.

* CI
  - [[https://github.com/haskell-CI/haskell-ci][haskell-ci]] :: Scripts and instructions for using CI services (e.g. Travis CI or Appveyor) with multiple GHC configurations

* Cheatsheet
  - [[https://github.com/takenobu-hs/haskell-symbol-search-cheatsheet][symbol search cheatsheet]] ::

* Checklist
  - [[https://github.com/haskell-perf/checklist][checklist]] :: A checklist to optimize code

* IDE
  - [[https://github.com/haskell/haskell-language-server][haskell-language-server]] :: A framework which can work with vim, emacs and others
  - [[https://github.com/leksah/leksah][leksah]] ::

* Tutor
  - real world haskell ::
      - [[https://github.com/huangz1990/real-world-haskell-cn][cn]] ::
  - learn4haskell ::

* Misc
  - [[http://www.luna-lang.org/][luna-lang]] :: a visual lang.
  - [[https://www.idris-lang.org/][Idris]] :: A Dependently Typed Functional Programming Language

* Awesome
  - [[https://github.com/krispo/awesome-haskell][haskell]] ::
  - [[https://haskell.pl-a.net/][haskell planetarium]] ::
  - [[https://github.com/albohlabs/awesome-haskell][for beginner]] ::
  - [[https://github.com/sdiehl/wiwinwlh][wiwinwlh]] ::
  - *[[https://toolbox.brick.do/][toolbox]]* :: Useful tools when developing haskell

* Article
  - [[https://www.williamyaoh.com/posts/2019-11-24-design-and-testing-articles.html][A LIST OF HASKELL ARTICLES ON GOOD DESIGN, GOOD TESTING]] ::
  - [[http://www.willamette.edu/~fruehr/haskell/evolution.html][The Evolution of a Haskell Programmer ]] ::
  - [[https://stackoverflow.com/questions/6724434/how-to-debug-haskell-code][How to debug Haskell code?]] ::
  - [[https://stackoverflow.com/questions/4156727/what-is-the-difference-between-pattern-matching-and-guards][What is the difference between Pattern Matching and Guards?]] ::
  - 范畴论完全装逼手册 / Grokking Monad ::
      - [[https://web.archive.org/web/20191027082028/https://blog.oyanglul.us/grokking-monad/part1][part1]] ::
      - [[https://web.archive.org/web/20191027082045/https://blog.oyanglul.us/grokking-monad/part2][part2]] ::
      - [[https://web.archive.org/web/20191027082055/https://blog.oyanglul.us/grokking-monad/part3][part3]] ::
  - [[https://web.archive.org/web/20201211002735/https://www.snoyman.com/series/haskell-bad-parts][haskell-bad-parts]] ::

* Library
** Codc
*** Compression
    - zstd ::
*** Serialize
    - serialise :: control format
    - cereal ::
** CLI
*** Arguments
    - optparse-generic :: This library auto-generates an
      optparse-applicative-compatible Parser from any data type that derives the
      Generic interface.
    - optparse-applicative ::

*** Input
    - haskeline ::

*** Interpreter
    - ihaskell ::
** Data
   - [[https://github.com/isomorphism/these][these]] :: An either-or-both data type, with corresponding hybrid error/writer monad transformer.
*** String
   - Text :: utf
   - ByteString :: binary, ascii
   - fmt :: A new formatting library that tries to be simple to understand
     while still being powerful and providing more convenience features than
     other libraries (like functions for pretty-printing maps and lists, or a
     function for printing arbitrary datatypes using generics).
   - text-icu :: unicode aware
   - lucid :: html
   - xml-conduit :: xml
   - aeson :: json
   - [[https://hackage.haskell.org/package/json-to-haskell][json-to-haskell]] :: generate haskell code by json data
*** Cryptography
    - password :: Hashing and checking of passwords
    - cryptonite :: many algorithms
*** Parsing
    - megaparsec :: Monadic parser combinators
*** Struct
    - containers ::
        - sets :: for set-like things
        - dictionaries :: dictionaries, hashmaps, maps, etc.
        - sequences :: lists, vectors/arrays, sequences, etc.
    - unordered-containers ::
    - stm-containers :: This library is based on an STM-specialized
      implementation of Hash Array Mapped Trie. It provides efficient
      implementations of Map, Set and other data structures, which starting from
      version 1 perform even better than their counterparts from
      "unordered-containers", but also scale well on concurrent access
      patterns.
    - [[https://github.com/ZHaskell/z-data][z-data]] :: array, slices and text
** Game
   - [[https://github.com/LambdaHack/LambdaHack][LambdaHack]] :: Haskell game engine library for roguelike dungeon crawlers; please offer feedback
** Graphisc
   - gloss :: Gloss hides the pain of drawing simple vector graphics behind a nice data type and a few display functions. Gloss uses OpenGL under the hood, but you won't need to worry about any of that. Get something cool on the screen in under 10 minutes.
** Link
   - plugins :: Dynamic linking for Haskell and C objects
** Math
   - hmatrix :: Linear algebra and numerical computation
   - dimensional :: Dimensional library variant built on Data Kinds, Closed Type
     Families, TypeNats (GHC 7.8+).
   - what4 :: Symbolic formula representation and solver interaction library
   - group-theory :: the theory of group
** Monadic
   - transformers ::
   - mtl ::
** Net
*** Request
    - req ::
    - wreq :: scripting
    - http-client-tls :: everything else(client)
    - servant-client :: both the client and the server.
    - haxl :: A Haskell library that simplifies access to remote data, such as
      databases or web-based services.
*** Server
   - [[Year:month:day][yesod]] :: A RESTful Haskell web framework built on WAI.
   - servant :: servant is a set of Haskell libraries for writing type-safe web
     applications but also deriving clients (in Haskell and other languages) or
     generating documentation for them, and more.
** Benchmarking
   - criterion :: This library provides a powerful but simple way to measure
     software performance. It provides both a framework for executing and
     analysing benchmarks and a set of driver functions that makes it easy to
     build and run benchmarks, and to analyse their results.
   - gauge :: 'gauge' is a lean, maintained fork of Criterion
** Foundation
   - foundation :: a replace for prelude
   - [[https://github.com/polysemy-research/polysemy][polysemy]] :: gemini higher-order, no-boilerplate, zero-cost monads
** Symbolic
   - [[https://github.com/GaloisInc/crucible][crucible]] :: Crucible is a library for symbolic simulation of imperative programs
** Test
   - quickcheck ::
   - hspce ::
   - tasty ::
   - haskell-hedgehog :: Release with confidence, state-of-the-art property
     testing for Haskell.
** System
   - random ::
   - retry :: retry io action
** C preprocessor
   - cpphs ::
* Utils
** Blog
   - hakyll :: static blog
** Generic
   - [[https://generics.jasperwoudenberg.com/][generics]] :: archive
** GHC
   - [[https://github.com/bgamari/ghc-utils][bgamari/ghc-utils]]
   - [[https://github.com/alpmestan/ghc.nix][ghc with nix support]] :: Nix (shell) expression for working on GHC
** Configure
   - hnix :: Haskell implementation of the Nix language
   - dhall ::
** Performance
   - ~ghc -profile~ ::
** AI
   - [[https://github.com/hasktorch/hasktorch][hasktorch]] :: Tensors and neural networks in Haskell
* Amazing
  - [[https://github.com/dpiponi/quine-central][dpiponi/quine-central]] :: This is a Haskell program that prints out a Perl program that prints out a Python program that prints out a Ruby program that prints out a C program that prints out a Java program that prints out the original program.
